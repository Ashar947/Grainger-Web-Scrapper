// side 
app.get('/productsData/2', async (req, res) => {
    try {
        const url = "https://www.grainger.com/category/abrasives/sanding-abrasives/sanding-discs/arbor-hole-mount-discs/flap-discs?categoryIndex=1";
        const productsDetails = [];
        process.setMaxListeners(25);
        var templist = [];
        var newlist = [];
        const response = await axios.get(url);
        const $ = await cheerio.load(response.data);
        const product_section = $(".MAcbb-");
        product_section.each(async function () {
            const id = $(this).attr("id");
            const mainTitle = $(this).find(".sC0Aof").text();
            const description = $(this).find("._1Pvnsk").text();
            const product_types = [];
            const types = $(`#${id} .T8G8vu`);
            types.each(async function () {
                const type_id = $(this).attr("id");
                const regex = /\d+/g;
                const numbers = type_id.match(regex);
                var firstNumber = 0;
                var secondNumber = 0;
                if (numbers) {
                    // Extract the first and second numbers
                    firstNumber = numbers[0];
                    secondNumber = numbers[1];
                    console.log(type_id)
                    console.log("First Number:", firstNumber);
                    console.log("Second Number:", secondNumber);
                } else {
                    console.log("No numbers found in the string.");
                }
                const type_name = $(this).find(`.SQoGqa`).text();
                const type_image = $(".sBtbCN").attr('src');
                const browser = await puppeteer.launch({
                    headless: false,
                    defaultViewport: null,
                    userDataDir: './tmp'
                });
                const page = await browser.newPage();
                await page.goto(pageUrl);

                // Wait for the table header to load
                await page.waitForSelector(`#table-${firstNumber}-${secondNumber - 1}-header tr th:nth-child(1)`);

                // Get the table header text
                const tableHeaders = await page.$$eval(`#table-${firstNumber}-${secondNumber - 1}-header tr th`, (buttons) => buttons.map(button => button.textContent));

                await console.log('Table Headers:', tableHeaders);

                await page.waitForSelector(`#stack-table-${firstNumber}-${secondNumber - 1} table tbody tr td.Ghghrv.K4FTFZ div.EJzsjT`);
                // Get the table body text
                const body = await page.$$eval(`#stack-table-${firstNumber}-${secondNumber - 1} table tbody tr td.Ghghrv`, (divs) => divs.map(div => div.getAttribute('title')));
                // Create an array to store the table body rows
                const tablebody = [];
                // Check if the lengths are equal and push rows into tablebody
                while (body.length > 0) {
                    if (body.length >= tableHeaders.length) {
                        const row = body.splice(0, tableHeaders.length);
                        await tablebody.push(row);
                    } else {
                        break;
                    }
                }

                await console.log('Table Body:', tablebody);
                const typeDetails = {
                    type_name,
                    type_image,
                    table_header: tableHeaders,
                    table_body: tablebody
                };
                await product_types.push(typeDetails);
            });
            await browser.close()
            await productsDetails.push({ mainTitle, description, product_types });
        });
        await res.send(productsDetails);
        console.log(newlist)
    } catch (error) {
        console.log(error);
        res.send(error);
    }
});

app.get('/productsData', async (req, res) => {
    try {
        const url = "https://www.grainger.com/category/abrasives/sanding-abrasives/sanding-discs/arbor-hole-mount-discs/flap-discs?categoryIndex=1";
        const productsDetails = [];
        var templist = [];
        var newlist = [];
        const response = await axios.get(url);
        const $ = await cheerio.load(response.data);
        const product_section = $(".MAcbb-");
        product_section.each(async function () {
            const id = $(this).attr("id");
            const mainTitle = $(this).find(".sC0Aof").text();
            const description = $(this).find("._1Pvnsk").text();
            const product_types = [];
            const types = $(`#${id} .T8G8vu`);
            types.each(async function () {
                const type_id = $(this).attr("id");
                const regex = /\d+/g;
                const numbers = type_id.match(regex);
                var firstNumber = 0;
                var secondNumber = 0;
                if (numbers) {
                    // Extract the first and second numbers
                    firstNumber = numbers[0];
                    secondNumber = numbers[1];
                    console.log("First Number:", firstNumber);
                    console.log("Second Number:", secondNumber);
                    const jsonData = {
                        url: url,
                        tableID: firstNumber,
                        index: secondNumber - 1
                    };
                    process.setMaxListeners(25);
                    try {
                        const response = await axios.post('http://127.0.0.1:5000/tableData', jsonData);
                        console.log(response)
                    } catch (error) {
                        console.error("Error in dynamicTable:", error);
                    }
                } else {
                    console.log("No numbers found in the string.");
                }
                console.log("hree")
                const type_name = $(this).find(`.SQoGqa`).text();
                const type_image = $(".sBtbCN").attr('src');
                // const table_header = pupData.tableHeaders;
                // const table_body = pupData.tablebody;
                const typeDetails = {
                    type_name,
                    type_image,
                    table_header: [],
                    table_body: []
                };
                product_types.push(typeDetails);
            });
            productsDetails.push({ mainTitle, description, product_types });
        });
        res.send(productsDetails);
        console.log(newlist)
    } catch (error) {
        console.log(error);
        res.send(error);
    }
})


app.get('/test', async (req, res) => {
    try {
        const category = await Category.findOne({ category_name: 'Abrasives' })
        if (!category) {
            return res.status(401).json({ message: "category not found" })
        }
        res.send(category.category_scrap_links)
    } catch (error) {
        res.status(400).json({ message: error.message })
    }
})


app.get('/scrapFinal', async (req, res) => {
    try {
        process.setMaxListeners(999999999999);
        const nameCategory = "Abrasives";
        const category = await Category.findOne({ category_name: nameCategory });
        if (!category) {
            return res.status(401).json({ message: "category not found" })
        }
        let links = category.category_scrap_links;
        for (const x of links) {
            let dispatchUrl = x.link
            let sendJsonData = {
                URL: dispatchUrl,
                prodCat: nameCategory
            }
            try {
                const response = await axios.post(`http://127.0.0.1:5000/productsData`, sendJsonData, {
                    headers: { 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=50000000000000000000000' },
                });
                console.log(response)
            } catch (error) {
                return res.status(405).json({ message: error.message })
            }

        }
        // links.map(async (obj) => {
        //     let dispatchUrl = obj.link
        // let sendJsonData = {
        //     URL : dispatchUrl,
        //     prodCat :nameCategory
        // }
        //     try {
        // const response = await axios.post(`http://127.0.0.1:5000/productsData`,sendJsonData);
        //         console.log(response)
        //     } catch (error) {
        //         return res.status(401).json({message:"error while axios request to productsData",error:error.message})
        //     }
        // });
        return res.status(200).json({ message: "Success" })
    } catch (error) {
        res.status(400).json({ message: error.message })
    }
})

app.post('/productsData', async (req, res) => {
    try {
        const { URL, prodCat } = req.body;
        const url = URL;
        const productsDetails = [];
        var templist = [];
        var newlist = [];
        const response = await axios.get(url, { headers });
        const $ = await cheerio.load(response.data);
        const product_section = $(".MAcbb-");
        let newSecondNumber;
        for (const product of product_section) {
            const id = $(product).attr("id");
            const mainTitle = $(product).find(".sC0Aof").text();
            const description = $(product).find("._1Pvnsk").text();
            const product_types = [];
            const types = $(`#${id} .T8G8vu`);
            for (const type of types) {
                const type_id = $(type).attr("id");
                const regex = /\d+/g;
                const numbers = type_id.match(regex);
                var firstNumber = 0;
                var secondNumber = 0;

                if (numbers) {
                    // Extract the first and second numbers
                    firstNumber = numbers[0];
                    secondNumber = numbers[1];
                    console.log("First Number:", firstNumber);
                    console.log("Second Number:", secondNumber);
                    // if (secondNumber >=3){
                    //     newSecondNumber = parseInt(secondNumber) + 1
                    // }else{
                    //     newSecondNumber = parseInt(secondNumber)-1
                    // }
                    const jsonData = {
                        url: url,
                        tableID: firstNumber,
                        index: secondNumber
                    };

                    process.setMaxListeners(99999);

                    try {
                        console.log(jsonData)
                        const response = await axios.post('http://127.0.0.1:5000/tableData', jsonData,
                            {
                                headers: { 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=50000000000000000000000' },
                            });
                        console.log("hree");
                        const type_name = $(type).find(`.SQoGqa`).text();
                        const type_image = $(".sBtbCN").attr('src');
                        const typeDetails = {
                            type_name,
                            type_image,
                            table_header: response.data.header,
                            table_body: response.data.body
                        };
                        product_types.push(typeDetails);
                    } catch (error) {
                        console.error("Error in dynamicTable:", error);
                    }
                } else {
                    console.log("No numbers found in the string.");
                }
                // console.log("hree");
                // const type_name = $(type).find(`.SQoGqa`).text();
                // const type_image = $(".sBtbCN").attr('src');
                // const typeDetails = {
                //     type_name,
                //     type_image,
                //     table_header: response.data.header,
                //     table_body: response.data.body
                // };
                // product_types.push(typeDetails);
            }

            productsDetails.push({ productCategory: prodCat, mainTitle, description, product_types });
            // const newProduct = new Product({ productCategory: "Test", mainTitle, description, product_types })
            // await newProduct.save();

        }
        await Product.insertMany(productsDetails);
        res.send(productsDetails);
        console.log(newlist);
    } catch (error) {
        console.log(error);
        res.send(error);
    }
});



app.post('/tableData', async (req, res) => {
    const { url, tableID, index } = req.body;
    const browser = await puppeteer.launch({
        headless: false,
        executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
        defaultViewport: null,
        userDataDir: './tmp'
    });
    const page = await browser.newPage();
    await page.goto(url);
    try {
        // let table_header_selector = `#stack-94390-stack-1 #stack-table-${tableID}-${index} table thead tr th:nth-child(1)`
        // let table_body_selector =`#stack-94390-stack-1 #stack-table-${tableID}-${index} table tbody tr td.Ghghrv`
        let table_header_selector = `#stack-${tableID}-stack-${index} .WBaEey table thead tr th:nth-child(1)`
        let table_body_selector = `#stack-${tableID}-stack-${index} .WBaEey table tbody tr td.Ghghrv`
        process.setMaxListeners(225);
        console.log(req.body)
        try {
            // Wait for the table header to load
            const selector = table_header_selector;
            await page.waitForSelector(selector);
            for (let i = 0; i < 5; i++) {
                console.log(i)
                await page.evaluate((selector, i) => {
                    const element = document.querySelectorAll(selector)[i];
                    if (element) {
                        element.scrollIntoView();
                        console.log("Element Found ..................")
                    }
                }, selector, i);
            }

            // Get the table header text
            const tableHeaders = await page.$$eval(`#stack-${tableID}-stack-${index} .WBaEey table thead tr th`, (buttons) => buttons.map(button => button.textContent));
            console.log('Table Headers:', tableHeaders);

            await page.waitForSelector(table_body_selector);
            // Get the table body text
            const body = await page.$$eval(table_body_selector, (divs) => divs.map(div => div.getAttribute('title')));
            // Create an array to store the table body rows
            const tablebody = [];
            // Check if the lengths are equal and push rows into tablebody
            while (body.length > 0) {
                if (body.length >= tableHeaders.length) {
                    const row = body.splice(0, tableHeaders.length);
                    tablebody.push(row);
                } else {
                    break;
                }
            };
            console.log('Table Body:', tablebody);
            await browser.close();
            return res.status(200).json({ header: tableHeaders, body: tablebody })
            // return { tableHeaders, tablebody }
        } catch (error) {
            await browser.close();
            console.log(error);
            return res.status(404).json({ msg: "Error" })
        }
    } catch (error) {
        console.log(error)
    }
})